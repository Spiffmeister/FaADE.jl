

"""
    construct_grid(χ::Function,grid::Grid2D,z::Vector)
Constructs the backwards and forward planes for a given plane

Inputs:
- Field line ODE that returns ``[x,y]``
- GridType
- z values of planes to trace to

Outputs:
- ParallelGrid object (see [ParallelGrid](@ref))
"""
function construct_grid(χ::Function,grid::Grid2D{T},z::Vector{T};xmode=:stop,ymode=:period,interpmode=:bicubic,remap=nothing) where T

    modelist = [:stop,:period,:ignore]
    xmode ∈ modelist ? nothing : error("mode unavailable")
    ymode ∈ modelist ? nothing : error("mode unavailable")

    if typeof(grid) <: Grid2D
        if typeof(remap) <: Nothing
            xy = [collect(grid[I]) for I in eachindex(grid)]
        elseif typeof(remap) <: Function
            xy = [remap(grid[I]...) for I in eachindex(grid)]
        end
    end

    BPlane = construct_plane(χ,xy,z[1],size(grid))
    FPlane = construct_plane(χ,xy,z[2],size(grid))
    # plane = reshape(xy,grid.nx,grid.ny)

    postprocess_plane!(BPlane,[grid.gridx[1],grid.gridx[end]],[grid.gridy[1],grid.gridy[end]],xmode,ymode)
    postprocess_plane!(FPlane,[grid.gridx[1],grid.gridx[end]],[grid.gridy[1],grid.gridy[end]],xmode,ymode)

    if interpmode == :nearest
        ix,iy = _remap_to_nearest_neighbours(grid,BPlane)
        BPlane = ParGrid{Int,typeof(ix)}(ix,iy,ones(Int,size(ix)))
        
        ix,iy = _remap_to_nearest_neighbours(grid,FPlane)
        FPlane = ParGrid{Int,typeof(ix)}(ix,iy,ones(Int,size(ix)))
    end

    Pgrid = ParallelGrid{eltype(BPlane.x),2,typeof(BPlane),typeof(BPlane.x)}(BPlane,FPlane)

    return Pgrid
end
"""
    construct_grid(χ::Function,grid::GridMultiBlock,z::Vector;interpmode=:nearest)
Constructs the backwards and forward planes for a multiblock grid. Returns a dictionary of PGrid objects corresponding to the grids in GridMultiBlock.

By default will return points for nearest neighbour interpolation.
"""
function construct_grid(χ::Function,grid::GridMultiBlock{TT,DIM,MET},z::Vector{TT};gridoptions=Dict()) where {TT,DIM,MET}

    xbounds = [minimum([minimum(grid.Grids[I].gridx) for I in eachgrid(grid)]),
        maximum([maximum(grid.Grids[I].gridx) for I in eachgrid(grid)])]
    ybounds = [minimum([minimum(grid.Grids[I].gridy) for I in eachgrid(grid)]),
        maximum([maximum(grid.Grids[I].gridy) for I in eachgrid(grid)])]


    if "coords" ∈ keys(gridoptions)
        if typeof(gridoptions["coords"][1]) <: Function
            coordinate_map = gridoptions["coords"][1]
            inverse_coordinate_map = gridoptions["coords"][2]
        elseif typeof(gridoptions["coords"][1]) <: Symbol
            if gridoptions["coords"] == (:rθ,:xy)
                coordinate_map = (x,y) -> [sqrt(x^2 + y^2), atan(y,x)]
                inverse_coordinate_map = (r,θ) -> [r*cos(θ), r*sin(θ)]
            end
        end


        if "xbound" ∈ keys(gridoptions)
            xbounds = gridoptions["xbound"]
        else
            error("If coords is set then xbound must be provided.")
        end
        if "ybound" ∈ keys(gridoptions)
            ybounds = gridoptions["ybound"]
        else
            error("If coords is set then ybound must be provided.")
        end
    else
        coordinate_map = nothing
        inverse_coordinate_map = nothing
    end

    remapping = :none
    if "remapping" ∈ keys(gridoptions)
        remapping = gridoptions["remapping"]
        println("Remapping grid to weights for $remapping")
        if remapping ∉ [:nearest,:bilinear,:idw,:none]
            error("Options for remapping grid is :nearest, :bilinear, :idw (inverse distance weighting), :none.")
        end
    end

    xmode = :stop
    ymode = :period
    if "xmode" ∈ keys(gridoptions)
        xmode = gridoptions["xmode"]
        if xmode ∉ [:stop,:period,:ignore]
            error("xmode not available")
        end
    end
    if "ymode" ∈ keys(gridoptions)
        ymode = gridoptions["ymode"]
        if ymode ∉ [:stop,:period,:ignore]
            error("ymode not available")
        end
    end


    if MET == CurvilinearMetric
        @warn "If this grid is generated by transfinite interpolation the parallel map construction may not be correct."
    end


    PGridStorage = Dict()

    for I in eachgrid(grid)
        # Use the single grid version for the subgrid
        Pgrid = construct_grid(χ,grid.Grids[I],z,xmode=:ignore,ymode=:ignore,remap=coordinate_map)

        # Post processing to ensure grid points are inbounds etc...
        postprocess_plane!(Pgrid.Bplane,xbounds,ybounds,xmode,ymode,inverse_coordinate_map)
        postprocess_plane!(Pgrid.Fplane,xbounds,ybounds,xmode,ymode,inverse_coordinate_map)
        
        # If we are supposed to remap or not
        if remapping == :nearest
            Bplane = _remap_to_nearest_neighbours(grid,Pgrid.Bplane)
            Fplane = _remap_to_nearest_neighbours(grid,Pgrid.Fplane)
            PGridStorage[I] = ParallelGrid{eltype(Bplane.weight11),DIM,typeof(Bplane),typeof(Bplane.weight11)}(Bplane,Fplane)

        elseif remapping == :bilinear
            Bplane = _remap_to_linear(grid,Pgrid.Bplane)
            Fplane = _remap_to_linear(grid,Pgrid.Fplane)
            PGridStorage[I] = ParallelGrid{eltype(Bplane.weight11),DIM,typeof(Bplane),typeof(Bplane.weight11)}(Bplane,Fplane)

        elseif remapping == :idw
            Bplane = _remap_to_idw(grid,Pgrid.Bplane)
            Fplane = _remap_to_idw(grid,Pgrid.Fplane)
            PGridStorage[I] = ParallelGrid{eltype(Bplane.weight11),DIM,typeof(Bplane),typeof(Bplane.weight11)}(Bplane,Fplane)
            
        elseif remapping == :none
            sgi = _subgrid_index(grid,Pgrid.Bplane)
            Bplane = ParGrid{TT,typeof(Pgrid.Bplane.x)}(Pgrid.Bplane.x,Pgrid.Bplane.y,sgi)
            sgi = _subgrid_index(grid,Pgrid.Fplane)
            Fplane = ParGrid{TT,typeof(Pgrid.Fplane.x)}(Pgrid.Fplane.x,Pgrid.Fplane.y,sgi)
            PGridStorage[I] = ParallelGrid{eltype(Bplane.x),DIM,typeof(Bplane),typeof(Bplane.x)}(Bplane,Fplane)

        end

    end

    return PGridStorage
end

"""
    construct_plane(χ,X,z,n)
Constructs the forward and backward planes for a single solution plane
"""
function construct_plane(χ::Function,X::AbstractArray{Vector{T}},z,n;periods=1) where T

    function prob_fn(prob,i,repeat)
        remake(prob,u0=X[i])
    end
    P = ODEProblem(χ,X[1],(T(0),T(periods)*z))
    EP = EnsembleProblem(P,prob_func=prob_fn)

    sim = solve(EP,Tsit5(),EnsembleSerial(),trajectories=prod(n),reltol=1e-6,
        save_on=false,save_end=true)

    planex = zeros(T,n)
    planey = zeros(T,n)
    for i = 1:prod(n)
        planex[i] = sim.u[i].u[2][1]
        planey[i] = sim.u[i].u[2][2]
    end

    return ParGrid{T,typeof(planex)}(planex,planey,zeros(Int,1,1))
end



# function remap_parallel_grid(grid,parallelgrid,method)
# end
function _remap_to_linear(grid::GridMultiBlock{TT,2,CartesianMetric},plane::ParGrid) where {TT}
    iindex = zeros(Int,size(plane.x))
    jindex = zeros(Int,size(plane.x))
    sgi = zeros(Int,size(plane.x))

    weight11 = zeros(TT,size(plane.x))
    weight12 = zeros(TT,size(plane.x))
    weight21 = zeros(TT,size(plane.x))
    weight22 = zeros(TT,size(plane.x))


    for I in eachindex(sgi)
        pt = (plane.x[I], plane.y[I])

        sgi[I] = findgrid(grid,pt)

        subgrid = grid.Grids[sgi[I]]

        # First we need to find the cell the node belongs to
        i,j = findcell(subgrid,pt)

        iindex[I] = i; jindex[I] = j

        ΔxΔy = (subgrid.gridx[i+1,j] - subgrid.gridx[i,j])*(subgrid.gridy[i,j+1] - subgrid.gridy[i,j])
        
        weight11[I] = (subgrid.gridx[i+1,j] - pt[1]) * (subgrid.gridy[i,j+1] - pt[2])/ΔxΔy  # bottom left
        weight12[I] = (pt[1] - subgrid.gridx[i,j]) * (subgrid.gridy[i,j+1] - pt[2])/ΔxΔy    # bottom right
        weight21[I] = (subgrid.gridx[i+1,j] - pt[1])   * (pt[2] - subgrid.gridy[i,j])/ΔxΔy    # top left
        weight22[I] = (pt[1] - subgrid.gridx[i,j])   * (pt[2] - subgrid.gridy[i,j])/ΔxΔy    # top right

    end

    return ParGridLinear{eltype(weight11),typeof(weight11),:Bilinear}(weight11,weight12,weight21,weight22,iindex,jindex,sgi)
end
function _remap_to_linear(grid::GridMultiBlock{TT,2,CurvilinearMetric},plane::ParGrid) where {TT}
    iindex = zeros(Int,size(plane.x))
    jindex = zeros(Int,size(plane.x))
    sgi = zeros(Int,size(plane.x))

    weight11 = zeros(TT,size(plane.x))
    weight12 = zeros(TT,size(plane.x))
    weight21 = zeros(TT,size(plane.x))
    weight22 = zeros(TT,size(plane.x))

    for I in eachindex(sgi)
        pt = (plane.x[I], plane.y[I])

        firstpt, ind, sgi[I] = nearestpoint(grid,pt,:cartesian)

        # We should check this is the correct grid and index
        if (ind[1] == 1) || (ind[1] == sgi[I]) || (ind[2] == 1) || (ind[2] == grid.Grids[sgi[I]].ny)
            try # if the point is outside the domain
                i,j = findcell(grid.Grids[sgi[I]],pt)
            catch # if that failed the point is not in the domain and we need to correct it
                joints = grid.Joint[sgi]
                dist = TT(1e10)
                for joint in joints # this will correct most instances
                    newpt,newind = nearestpoint(grid.Grids[joint.index],pt)
                    if dist > norm(newpt .- pt)
                        dist = norm(newpt .- pt)
                        sgi = joint.index
                        nearpt = newpt
                    end
                end

                # we need to try again since it may be outside the domain
                # if it is, move it to the nearest point
                try 
                    i,j = findcell(grid.Grids[sgi[I]],pt)
                catch
                    pt = nearpt
                end

            end

        else # otherwise we can proceed
            i,j = findcell(grid.Grids[sgi[I]],pt)
        end

        sgi[I] = findgrid(grid,pt)
        
        subgrid = grid.Grids[sgi[I]]

        i = 0; j = 0;



        # First we need to find the cell the node belongs to
        if (i == 1) || (i == subgrid.nx) || (j == 1) || (j == subgrid.ny)
            # its possible the point is outside the domain
            try
                i,j = findcell(subgrid,pt)
            catch
            end
        else
            i,j = findcell(subgrid,pt)
        end

        iindex[I] = i; jindex[I] = j

        ΔxΔy = (subgrid.gridx[i+1,j] - subgrid.gridx[i,j])*(subgrid.gridy[i,j+1] - subgrid.gridy[i,j])
        
        weight11[I] = (subgrid.gridx[i+1,j] - pt[1]) * (subgrid.gridy[i,j+1] - pt[2])/ΔxΔy  # bottom left
        weight12[I] = (pt[1] - subgrid.gridx[i,j]) * (subgrid.gridy[i,j+1] - pt[2])/ΔxΔy    # bottom right
        weight21[I] = (subgrid.gridx[i+1,j] - pt[1])   * (pt[2] - subgrid.gridy[i,j])/ΔxΔy    # top left
        weight22[I] = (pt[1] - subgrid.gridx[i,j])   * (pt[2] - subgrid.gridy[i,j])/ΔxΔy    # top right

    end

    return ParGridLinear{eltype(weight11),typeof(weight11),:Bilinear}(weight11,weight12,weight21,weight22,iindex,jindex,sgi)
end



"""
    inverse_bilinear_interpolation
Given the four points of a bilinear interpolation, find the weights for the point pt

"""

function inverse_bilinear_interpolation(p11,p12,p21,p22,pt)
    Q1 = p21 .- p11 # lower wall
    Q2 = p22 .- p21 # right wall
    Q3 = (p22 .- p21) .- (p12 .- p11)
    Q = pt .- p11




    @show k0 = (Q[1]*Q1[2] - Q[2]*Q1[1])
    @show k1 = (-Q[2]*Q3[1] + Q[1]*Q3[2] - Q1[2]*Q2[1] + Q2[2]*Q1[1])
    @show k2 = (Q2[2]*Q3[1] - Q3[2]*Q2[1])

    @show k1^2 - 4*k0*k2, sign(k1^2 - 4*k0*k2)
    
    @show  (-k1+sqrt(k1^2 - 4*k0*k2))/2k0, (-k1-sqrt(k1^2 - 4*k0*k2))/2k0
    v = max( (-k1+sqrt(k1^2 - 4*k0*k2))/2k0, (-k1-sqrt(k1^2 - 4*k0*k2))/2k0 )

    u = (Q[1] - Q2[1]*v)/(Q1[1] + Q3[1]*v)

    return u,v
end


"""
    _remap_to_idw(grid::GridMultiBlock,plane::ParGrid)
Remap the interpolation points to their inverse distance weights
"""
function _remap_to_idw(grid::GridMultiBlock{TT,2},plane::ParGrid) where {TT}
    sgi = zeros(Int,size(plane.x))

    weight11 = zeros(TT,size(plane.x))
    weight12 = zeros(TT,size(plane.x))
    weight21 = zeros(TT,size(plane.x))
    weight22 = zeros(TT,size(plane.x))

    iindex = zeros(Int,size(plane.x))
    jindex = zeros(Int,size(plane.x))


    for I in eachindex(sgi)
        i = 0; j = 0;

        pt = (plane.x[I], plane.y[I])

        sgi[I] = findgrid(grid,pt)
        
        subgrid = grid.Grids[sgi[I]]

        cartind = CartesianIndices(subgrid.grid)[]

        # First we need to find the cell the node belongs to
        try
            # i,j = findcell(subgrid,pt)
            i,j = findcell(subgrid,pt)
            # @show pt, i, j
        catch

            firstnear,firstnearind = nearestpoint(subgrid,pt,:linear)

            cartind = CartesianIndices(subgrid.gridx)[firstnearind]
            i = cartind[1]
            j = cartind[2]
            pt = firstnear
            i,j = findcell(subgrid,pt)

            @warn "Point is not in the grid, moving the point and recomputing weights."
        end

        iindex[I] = i
        jindex[I] = j


        p1 = subgrid[i,j]
        p2 = subgrid[i+1,j]
        p3 = subgrid[i,j+1]
        p4 = subgrid[i+1,j+1]

        dist = 1/norm(p1 .- pt)^2 + 1/norm(p2 .- pt)^2 + 1/norm(p3 .- pt)^2 + 1/norm(p4 .- pt)^2

        weight11[I] = TT(1)/norm(p1 .- pt)^2 /dist
        weight12[I] = TT(1)/norm(p2 .- pt)^2 /dist
        weight21[I] = TT(1)/norm(p3 .- pt)^2 /dist
        weight22[I] = TT(1)/norm(p4 .- pt)^2 /dist

    end

    return ParGridLinear{TT,typeof(weight11),:InverseDistanceWeighting}(weight11,weight12,weight21,weight22,iindex,jindex,sgi)
end

"""
    _remap_to_nearest_neighbours(grid::GridMultiBlock,plane::ParGrid)
Remap the points generated by an x,y plane to their nearest neighbour in the full grid
"""
function _remap_to_nearest_neighbours(grid::GridMultiBlock,plane::ParGrid)
    ix = zeros(Int,size(plane.x))
    iy = zeros(Int,size(plane.y))
    sgi = zeros(Int,size(plane.x))

    for I in eachindex(ix)
        _,ind,gridind = nearestpoint(grid,(plane.x[I],plane.y[I]))
        ix[I] = ind
        iy[I] = ind
        sgi[I] = gridind
    end

    w11 = zeros(Float64,1,1)

    return ParGridLinear{Float64,Matrix{Float64},:NearestNeighbour}(w11,w11,w11,w11,ix,iy,sgi)
end
"""
    _remap_to_nearest_neighbours(grid::Grid2D,plane::ParGrid)
Remap the points for a single Grid2D to their nearest neighbours indexes
"""
function _remap_to_nearest_neighbours(grid::Grid2D,plane::ParGrid)
    ix = zeros(Int,size(plane.x))
    iy = zeros(Int,size(plane.y))

    for I in eachindex(ix)
        _, ind = nearestpoint(grid,(plane.x[I],plane.y[I]))
        ix[I] = iy[I] = ind
    end
    return ix,iy
end
"""
    _subgrid_index(grid::GridMultiBlock,plane::ParGrid,I::Int)
Find the subgrid index closest to each point in a ParGrid.
"""
function _subgrid_index(grid::GridMultiBlock,plane::ParGrid)
    containedgrid = zeros(Int,size(plane.x))
    for J in eachindex(plane.x)
        gridind = findgrid(grid,(plane.x[J],plane.y[J]),mode=:nearest)
        containedgrid[J] = gridind
    end
    return containedgrid
end





"""
    postprocess_plane!(X,xbound,ybound,xmode,ymode, remap=(:xy,:xy))
"""
function postprocess_plane!(X,xbound,ybound,xmode,ymode, remap=nothing)
    @views out_of_bounds!(X.x,xbound,xmode)
    @views out_of_bounds!(X.y,ybound,ymode)

    if remap == (:rθ,:xy)
    elseif typeof(remap) <: Function
        for I in eachindex(X.x)
            X.x[I], X.y[I] = remap(X.x[I],X.y[I])
        end
    end

end

"""

"""
function _remap_coordinates_rθ_to_xy(plane)
    for I in eachindex(plane.x)
        x = plane.x[I] * cos(plane.y[I])
        y = plane.x[I] * sin(plane.y[I])
        plane.x[I] = x
        plane.y[I] = y
    end
end


"""
    out_of_bounds!(X,boundx,boundy)
Move out of bounds points to the boundary
"""
@views function out_of_bounds!(X,bound,mode)
    
    if mode == :stop
        for i in eachindex(X)
            if X[i] ≤ bound[1]
                X[i] = bound[1]
            elseif X[i] ≥ bound[2]
                X[i] = bound[2]
            end
        end
    elseif mode == :period
        
        
        if bound[end] ≤ 3π/2
            for i in eachindex(X)
                X[i] = rem2pi(X[i],RoundNearest)
                if X[i] ≥ bound[end]
                    X[i] = bound[end]
                end
            end
        else
            # @show X[1], bound[end], X[1] > bound[end]
            for i in eachindex(X)
                X[i] = rem2pi(X[i],RoundDown)
                # if X[i] > bound[end] # if X[i] ~ 2π it can round to > 2π instead of 0
                #     X[i] = bound[end]
                # end
            end
            # @show X[1] == bound[end]
        end
    elseif mode == :ignore
    end
end


Base.show(io::IO, PG::ParallelGrid) = print(io, " generated parallel grid.")

