var documenterSearchIndex = {"docs":
[{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"EditURL = \"https://github.com/Spiffmeister/FaADE.jl/blob/master/tutorials/example3D.jl\"","category":"page"},{"location":"tutorials/example3D.html#D-Example","page":"3D Example","title":"3D Example","text":"","category":"section"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"For this example we will solve the head equation with a mangetic field aligned with the grid","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"  mathbfB = (001)","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"In this case we expect the parallel operator to do nothing since mathbfP_f=mathbfP_b=I","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"using FaADE","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"For this we'll solve the field aligned equation is","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"  fracpartial upartial t = kappa_perp nabla_perp^2 u + mathcalP_parallel u","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"with Dirichlet boundaries in x","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"      u(0yt) = 0 qquad partial_x u(1yt) = 0","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"periodic in y, and initial condition","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"      u(x0) = expleft(frac-(x-05)^2002right)","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"We first need to create a domain to solve the PDE using Grid2D","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"ùíüx = [0.0,1.0]\nùíüy = [0.0,1.0]\nnx = ny = 21\ngrid = Grid2D(ùíüx,ùíüy,nx,ny)","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"The initial condition is","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"u‚ÇÄ(x,y) = exp(-((x-0.5)^2 + (y-0.5)^2) / 0.02)","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"The boundary conditions are defined by creating Boundary objects, which will then be fed to the PDE structure","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"BoundaryLeft = Boundary(Dirichlet,(y,t)->0.0,Left)\nBoundaryRight = Boundary(Neumann,(y,t)->0.0,Right)\nBoundaryUpDown = PeriodicBoundary(2)","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"The 2 input to the periodic boundary ensures it is along the y-axis.","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"Set the FD order to 2 and use the conjugate gradient implicit euler (:cgie) solver,","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"order = 2\nmethod = :cgie","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"Forward Euler and RK4 are also available.","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"Set the diffusion in x and y directions to 1","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"Kx(x,y) = 1.0\nKy(x,y) = 1.0","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"NOTE: currently only conjugate gradient implicit Euler (:cgie) works as a solver","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"Now we can create a PDE object to pass to the solver, in this case a VariableCoefficientPDE2D,","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"P = VariableCoefficientPDE2D(u‚ÇÄ,Kx,Ky,order,BoundaryLeft,BoundaryRight,BoundaryUpDown)","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"The parallel penalty function can be generated by providing the code the ODE for magnetic field lines,","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"function Bfield(X,x,p,t)\n    X[2] = 0.0\n    X[1] = 0.0\nend","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"Assuming a 2pi periodicity then we can construct a parallel grid object with construct_grid","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"PGrid = construct_grid(Bfield,grid,[-2œÄ,2œÄ])","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"It is not strictly necessary (since you can simply provide the PGrid to the solve call), but we can construct the penalty function manually with","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"Pfn = generate_parallel_penalty(PGrid,grid,order)","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"Lastly before solving we define our time step and simulation time,","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"Œît = 0.01grid.Œîx;\nt_f = 100Œît;\nnothing #hide","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"Finally we call the solver","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"soln = solve(P,grid,Œît,t_f,method,penalty_func=Pfn)","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"To provide the parallel grid instead use soln = solve(P,grid,Œît,t_f,method,Pgrid=PGrid)","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"","category":"page"},{"location":"tutorials/example3D.html","page":"3D Example","title":"3D Example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"Derivatives.html#Summation-by-Parts-operators","page":"Derivative Operators","title":"Summation by Parts operators","text":"","category":"section"},{"location":"Derivatives.html","page":"Derivative Operators","title":"Derivative Operators","text":"Below are the first and second derivative summation by parts operators.","category":"page"},{"location":"Derivatives.html#First-Derivative-operators","page":"Derivative Operators","title":"First Derivative operators","text":"","category":"section"},{"location":"Derivatives.html","page":"Derivative Operators","title":"Derivative Operators","text":"The below operators are for first derivatives","category":"page"},{"location":"Derivatives.html","page":"Derivative Operators","title":"Derivative Operators","text":"FaADE.Derivatives.D‚ÇÅ","category":"page"},{"location":"Derivatives.html#FaADE.Derivatives.D‚ÇÅ","page":"Derivative Operators","title":"FaADE.Derivatives.D‚ÇÅ","text":"D‚ÇÅ\n\n1D and 2D first derivative operator. \n\nAlso available as and internally uses in place operator D‚ÇÅ!.\n\n\n\n\n\nD‚ÇÅfunction D‚ÇÅ(u::AbstractVector{T},Œîx::T;order::Integer=2)\n\n1D implementation of D_x operator.\n\n\n\n\n\nD‚ÇÅ(u::AbstractMatrix{T},nx::Integer,ny::Integer,Œîx::T,Œîy::T;order::Integer=2)\n\n2D implementation of D_x operator\n\n\n\n\n\n","category":"function"},{"location":"Derivatives.html#As-iterators","page":"Derivative Operators","title":"As iterators","text":"","category":"section"},{"location":"Derivatives.html","page":"Derivative Operators","title":"Derivative Operators","text":"FaADE.Derivatives.D‚ÇÅ!","category":"page"},{"location":"Derivatives.html#FaADE.Derivatives.D‚ÇÅ!","page":"Derivative Operators","title":"FaADE.Derivatives.D‚ÇÅ!","text":"D‚ÇÅ!\n\n1D and 2D in place first derivative operator.\n\nSee also FirstDerivativeBoundary! and FirstDerivativeInternal!.\n\n\n\n\n\nD‚ÇÅ!(u‚Çì::AbstractVector{T},u::AbstractVector{T},n::Integer,Œîx::T,order::Integer)\n\n1D D‚ÇÅ!.\n\n\n\n\n\nfunction D‚ÇÅ!(u‚Çì::AbstractArray{T},u::AbstractArray{T},n::Integer,Œî::T,order::Integer,dim::Integer)\n\n1D implementation for 2D problems for D‚ÇÅ!.\n\n\n\n\n\n","category":"function"},{"location":"Derivatives.html#Second-Derivative-operators","page":"Derivative Operators","title":"Second Derivative operators","text":"","category":"section"},{"location":"Derivatives.html","page":"Derivative Operators","title":"Derivative Operators","text":"FaADE.Derivatives.D‚ÇÇ","category":"page"},{"location":"Derivatives.html#FaADE.Derivatives.D‚ÇÇ","page":"Derivative Operators","title":"FaADE.Derivatives.D‚ÇÇ","text":"D‚ÇÇ\n\nD‚ÇÇ(u,c,Œîx; order=2)\nD‚ÇÇ(u,Œîx,Œîy,cx,cy; order=2)\n\n1D and 2D second derivative operator.\n\nAlso available as and internally uses in place operator D‚ÇÇ!.\n\n\n\n\n\n","category":"function"},{"location":"Derivatives.html#As-iterators-2","page":"Derivative Operators","title":"As iterators","text":"","category":"section"},{"location":"Derivatives.html","page":"Derivative Operators","title":"Derivative Operators","text":"The following functions are also available as iterators","category":"page"},{"location":"Derivatives.html","page":"Derivative Operators","title":"Derivative Operators","text":"FaADE.Derivatives.D‚ÇÇ!","category":"page"},{"location":"Derivatives.html#FaADE.Derivatives.D‚ÇÇ!","page":"Derivative Operators","title":"FaADE.Derivatives.D‚ÇÇ!","text":"D‚ÇÇ!\n\n1D and 2D in place second derivative operator.\n\nInternally uses SecondDerivativeInternal and SecondDerivativeInternal.\n\n\n\n\n\n","category":"function"},{"location":"Derivatives.html#Internal-Functions","page":"Derivative Operators","title":"Internal Functions","text":"","category":"section"},{"location":"Derivatives.html","page":"Derivative Operators","title":"Derivative Operators","text":"FaADE.Derivatives.FirstDerivative\nFaADE.Derivatives.FirstDerivativeInternal\nFaADE.Derivatives.FirstDerivativeInternal!\nFaADE.Derivatives.FirstDerivativeBoundary!\nFaADE.Derivatives.FirstDerivativeBoundaryStencil!\n","category":"page"},{"location":"Derivatives.html#FaADE.Derivatives.FirstDerivative","page":"Derivative Operators","title":"FaADE.Derivatives.FirstDerivative","text":"FirstDerivative\n\nAllocating functions for first derivative, useful when need to add value to a matrix.\n\nSee also FirstDerivativeInternal! and FirstDerivativeBoundary\n\n\n\n\n\nFirstDerivative(u::AbstractVector{T},Œîx::T,::NodeType{:Internal},order::Integer)\n\nInternal node function.\n\n\n\n\n\nFirstDerivative(u::AbstractVector{T},Œîx::T,node::NodeType,order::Integer)\n\nBoundary node function.\n\n\n\n\n\n","category":"function"},{"location":"Derivatives.html#FaADE.Derivatives.FirstDerivativeInternal","page":"Derivative Operators","title":"FaADE.Derivatives.FirstDerivativeInternal","text":"FirstDerivativeInternal(u::AbstractVector{T},Œîx::T,::NodeType{:Internal},order::Integer)\n\nSingle node 1D first derivative function.\n\nSee also FirstDerivativeInternal! for in place multi-node functions\n\n\n\n\n\n","category":"function"},{"location":"Derivatives.html#FaADE.Derivatives.FirstDerivativeInternal!","page":"Derivative Operators","title":"FaADE.Derivatives.FirstDerivativeInternal!","text":"FirstDerivativeInternal!\n\n1D and 2D in place functions for first derivative on internal nodes of a domain\n\n\n\n\n\n","category":"function"},{"location":"Derivatives.html#FaADE.Derivatives.FirstDerivativeBoundary!","page":"Derivative Operators","title":"FaADE.Derivatives.FirstDerivativeBoundary!","text":"FirstDerivativeBoundary!\n\n1D in place function for first derivative on boundary nodes\n\n\n\n\n\n","category":"function"},{"location":"Derivatives.html#FaADE.Derivatives.FirstDerivativeBoundaryStencil!","page":"Derivative Operators","title":"FaADE.Derivatives.FirstDerivativeBoundaryStencil!","text":"FirstDerivativeBoundaryStencil!\n\n2D first derivative on a boundary.\n\n\n\n\n\nFirstDerivativeBoundaryStencil!(u‚Çì::AbstractArray{T},\n    u::AbstractArray{T},\n    xnode::NodeType,::NodeType{:Internal},\n    Œîx::T,Œîy::T,nx::Integer,ny::Integer,order::Integer,\n    Xrng::UnitRange=1:order,Yrng::UnitRange=1:order)\n\n\n\n\n\nFirstDerivativeBoundaryStencil!(u‚Çì::AbstractArray{T},\n    u::AbstractArray{T},\n    ::NodeType{:Internal},ynode::NodeType,\n    Œîx::T,Œîy::T,nx::Integer,ny::Integer,order::Integer,\n    Xrng::UnitRange=1:order,Yrng::UnitRange=1:order)\n\n\n\n\n\n","category":"function"},{"location":"Derivatives.html","page":"Derivative Operators","title":"Derivative Operators","text":"FaADE.Derivatives.SecondDerivative","category":"page"},{"location":"Derivatives.html#FaADE.Derivatives.SecondDerivative","page":"Derivative Operators","title":"FaADE.Derivatives.SecondDerivative","text":"SecondDerivative\n\nAllocating functions for second derivative, useful when need to add value to a matrix.\n\nSee also SecondDerivativeInternal! and SecondDerivativeBoundary!\n\n\n\n\n\n","category":"function"},{"location":"solvers.html#Time-Integration","page":"Solvers","title":"Time Integration","text":"","category":"section"},{"location":"solvers.html","page":"Solvers","title":"Solvers","text":"FaADE.solvers.solve","category":"page"},{"location":"solvers.html#FaADE.solvers.solve","page":"Solvers","title":"FaADE.solvers.solve","text":"solve\n\nSolve the 1D or 2D PDE on the given grid.\n\nCalls:\n\nsolve(Prob::VariableCoefficientPDE1D{T},grid::GridType{T,1},Œît::T,t_f::T,solver::Symbol;...)\nsolve(Prob::VariableCoefficientPDE2D{T},grid::GridType{T,2},Œît::T,t_f::T,solver::Symbol;...)\n\nInputs:\n\nProb: VariableCoefficientPDE1D or VariableCoefficientPDE2D\ngrid: Grid1D or Grid2D\nŒît - the time step\nt_f - the final time\nsolver::Symbol - must be :cgie currently.\n\nOptional inputs:\n\nadaptive::Bool=false true or false - Adaptive time stepping\nsource::Union{Nothing,Function}=nothing - Include a source term\npenalty_func::Union{Nothing,Function}=nothing - penalty function for mapping points along field lines\n\nTODO: Heavy optimisation required\n\n\n\n\n\n","category":"function"},{"location":"solvers.html","page":"Solvers","title":"Solvers","text":"FaADE.solvers.solution","category":"page"},{"location":"solvers.html#FaADE.solvers.solution","page":"Solvers","title":"FaADE.solvers.solution","text":"solution\n\nSolution data structure, contains the initial condition and the solution at time of  simulation termination. Also contains the grid structure and the PDE problem that was provided  originally by the user.\n\nFields:\n\nu, grid, Œît, t, problem, Œîu\n\n\n\n\n\n","category":"type"},{"location":"solvers.html#Integrators","page":"Solvers","title":"Integrators","text":"","category":"section"},{"location":"solvers.html#Implicit","page":"Solvers","title":"Implicit","text":"","category":"section"},{"location":"solvers.html","page":"Solvers","title":"Solvers","text":"FaADE.solvers.conj_grad!","category":"page"},{"location":"solvers.html#FaADE.solvers.conj_grad!","page":"Solvers","title":"FaADE.solvers.conj_grad!","text":"conj_grad!\n\nIn-place conjugate gradient method.\n\nSee also build_H, A!, innerH\n\n\n\n\n\n","category":"function"},{"location":"solvers.html#Explicit","page":"Solvers","title":"Explicit","text":"","category":"section"},{"location":"solvers.html#Conjugate-Gradient-helpers","page":"Solvers","title":"Conjugate Gradient helpers","text":"","category":"section"},{"location":"solvers.html","page":"Solvers","title":"Solvers","text":"FaADE.solvers.build_H\nFaADE.solvers.A!\nFaADE.solvers.innerH","category":"page"},{"location":"solvers.html#FaADE.Helpers.build_H","page":"Solvers","title":"FaADE.Helpers.build_H","text":"build_H\n\nBuild the H matrix in the SBP operator D‚ÇÅ = H‚Åª¬πQ\n\n\n\n\n\n","category":"function"},{"location":"solvers.html#FaADE.solvers.A!","page":"Solvers","title":"FaADE.solvers.A!","text":"A!\n\nMutable u - ŒîtD(u)\n\n\n\n\n\n","category":"function"},{"location":"solvers.html#FaADE.Helpers.innerH","page":"Solvers","title":"FaADE.Helpers.innerH","text":"innerH{T,N,VT<:AbstractVector{T}}\n\nMethod for a 1 or 2 dimensional H inner product.\n\nInputs:\n\nGridType\nOrder of method\n\nReturns:\n\nMethod-like struct for H-inner products\n\n\n\n\n\n","category":"type"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"EditURL = \"https://github.com/Spiffmeister/FaADE.jl/blob/master/tutorials/example2D.jl\"","category":"page"},{"location":"tutorials/example2D.html#D-example","page":"2D example","title":"2D example","text":"","category":"section"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"The 2D code works similarly to the 1D version, with a few different function calls.","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"using FaADE","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"This example gives a 1D solution to a 2D problem.","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"We'll solve the 2D heat equation.","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"      fracpartial upartial t = KfracDelta u","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"with boundary conditions","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"      u(0t) = 0 qquad partial_x u(1t) = 0","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"and initial condition","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"      u(x0) = expleft(frac-(x-05)^2002right)","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"We first need to create a domain to solve the PDE using Grid2D","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"ùíüx = [0.0,1.0]\nùíüy = [0.0,1.0]\nnx = ny = 41\ngrid = Grid2D(ùíüx,ùíüy,nx,ny)","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"The initial condition","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"u‚ÇÄ(x,y) = exp(-((x-0.5)^2 + (y-0.5)^2) / 0.02)","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"The boundary conditions are defined by creating Boundary objects, which will then be fed to the PDE structure","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"BoundaryLeft = Boundary(Dirichlet,(y,t)->0.0,Left)\nBoundaryRight = Boundary(Neumann,(y,t)->0.0,Right)\nBoundaryUpDown = PeriodicBoundary(2)","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"The 2 input to the periodic boundary ensures it is along the y-axis.","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"Set the FD order to 2 and use the conjugate gradient implicit euler (:cgie) solver,","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"order = 2\nmethod = :cgie","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"Forward Euler and RK4 are also available.","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"Set the diffusion in x and y directions to 1","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"Kx(x,y) = 1.0\nKy(x,y) = 1.0","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"Now we can create a PDE object to pass to the solver, in this case a VariableCoefficientPDE2D,","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"P = VariableCoefficientPDE2D(u‚ÇÄ,Kx,Ky,order,BoundaryLeft,BoundaryRight,BoundaryUpDown)","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"Lastly before solving we define our time step and simulation time,","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"Œît = 0.01grid.Œîx;\nt_f = 100Œît;\nnothing #hide","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"Finally we call the solver (currently not working with Documenter.jl)","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"soln = solve(P,grid,Œît,t_f,method)","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"The solver ourputs a solution data structure, with everything packaged in that we would need to reconstruct the problem from the final state if we wanted to restart.","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"No visualisation routines are written at the moment but we imported the Plots.jl package earlier so we'll use that","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"","category":"page"},{"location":"tutorials/example2D.html","page":"2D example","title":"2D example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"Helpers.html#Helpers","page":"Helpers","title":"Helpers","text":"","category":"section"},{"location":"Helpers.html","page":"Helpers","title":"Helpers","text":"The Helpers sub-package contains both user interface function and functions useful for many of the internals such as data structure objects. ","category":"page"},{"location":"Helpers.html#User-interaction-(@id-User_interaction)","page":"Helpers","title":"User interaction (@id User_interaction)","text":"","category":"section"},{"location":"Helpers.html","page":"Helpers","title":"Helpers","text":"FaADE.Helpers.Boundary\nFaADE.Helpers.PeriodicBoundary","category":"page"},{"location":"Helpers.html#FaADE.Helpers.Boundary","page":"Helpers","title":"FaADE.Helpers.Boundary","text":"Boundary{BT<:BoundaryConditionType,BF<:Function,BN<:NodeType,BA<:Integer}\n\nUser defined boundary conditions for Dirichlet or Neumann. TODO: Robin boundaries\n\nConstructors:\n\nBoundary(type::BoundaryConditionType,RHS::Function,side::NodeType,axis::Int)\nBoundary(type::BoundaryConditionType,RHS::Function,side::NodeType)\n\nInputs:\n\nDirichlet or Neumann (see BoundaryConditionType).\nf(x,t) or f(x,y,t) depending on the function which gives the boundary condition.\nLeft, Right, Up, or Down (see NodeType)\n1 if along the x axis or 2 along the y axis. TODO: Remove this requirement. \n\nReturns:\n\nStruct required for SAT construction.\n\n\n\n\n\n","category":"type"},{"location":"Helpers.html#FaADE.Helpers.PeriodicBoundary","page":"Helpers","title":"FaADE.Helpers.PeriodicBoundary","text":"PeriodicBoundary(axis::Int)\n\nUser defined periodic boundary conditions for Periodic boundaries.\n\nInputs: \n\n1 if periodic in x and 2 if periodic in y.\n\nReturns:\n\nStruct required for SAT construction.\n\n\n\n\n\n","category":"type"},{"location":"Helpers.html","page":"Helpers","title":"Helpers","text":"FaADE.Helpers.VariableCoefficientPDE1D\nFaADE.Helpers.VariableCoefficientPDE2D","category":"page"},{"location":"Helpers.html#FaADE.Helpers.VariableCoefficientPDE1D","page":"Helpers","title":"FaADE.Helpers.VariableCoefficientPDE1D","text":"VariableCoefficientPDE1D(u‚ÇÄ::Function,K::Function,order::Int,BCs::BoundaryConditionData...)\n\nPDE Problem type for user input\n\nInputs:\n\nInitial condition\nDiffusion coefficient function\nSolution order\nBoundary conditions given by Boundary or PeriodicBoundary\n\nReturns\n\nStruct of data required for solver\n\n\n\n\n\n","category":"type"},{"location":"Helpers.html#FaADE.Helpers.VariableCoefficientPDE2D","page":"Helpers","title":"FaADE.Helpers.VariableCoefficientPDE2D","text":"VariableCoefficientPDE2D\n\nPDE Problem type for user input\n\nInputs:\n\nInitial condition\nDiffusion coefficient function in x\nDiffusion coefficient function in y\nSolution order\nBoundary conditions given by Boundary or PeriodicBoundary\n\nReturns\n\nStruct of data required for solver\n\n\n\n\n\n","category":"type"},{"location":"Helpers.html","page":"Helpers","title":"Helpers","text":"FaADE.Helpers.Grid1D\nFaADE.Helpers.Grid2D","category":"page"},{"location":"Helpers.html#FaADE.Helpers.Grid1D","page":"Helpers","title":"FaADE.Helpers.Grid1D","text":"Grid1D\n\nGrid data structure for 1 dimensional problems.\n\n`Grid1D{T}(ùíü::Vector,n::Integer)`\n\nInputs:\n\nVector of domain boundaries [x_0,x_N]\nNumber of grid points.\n\nReturns:\n\nStruct for 1D grid object containing vector of grid points, Delta x and n.\n\n\n\n\n\n","category":"type"},{"location":"Helpers.html#FaADE.Helpers.Grid2D","page":"Helpers","title":"FaADE.Helpers.Grid2D","text":"Grid2D\n\nGrid data structure for 2 dimensional problems.\n\n`Grid2D{T}(ùíüx::Vector,ùíüy::Vector,nx::Integer,ny::Integer)`\n\nInputs:\n\nDomain boundaries in x\nDomain boundaries in y\nNumber of nodes in x\nNumber of nodes in y\n\nReturns:\n\nStruct for 2D grid object containing grid points in x and y, Delta x and Delta y, and n_x and n_y.\n\n\n\n\n\n","category":"type"},{"location":"Helpers.html#Types","page":"Helpers","title":"Types","text":"","category":"section"},{"location":"Helpers.html","page":"Helpers","title":"Helpers","text":"FaADE.Helpers.NodeType\nFaADE.Helpers.BoundaryConditionType","category":"page"},{"location":"Helpers.html#FaADE.Helpers.NodeType","page":"Helpers","title":"FaADE.Helpers.NodeType","text":"NodeType\n\nUsed by FirstDerivative() and SecondDerivative() to indicate which node type should be used.\nLeft and Right are used by the SAT() function to determine which side of the SAT to call.\n\nNode types are:\n\nLeft\nInternal\nRight\nUp\nDown\n\n\n\n\n\n","category":"type"},{"location":"Helpers.html#FaADE.Helpers.BoundaryConditionType","page":"Helpers","title":"FaADE.Helpers.BoundaryConditionType","text":"BoundaryCondition\n\nDefines the boundary conditions, options are:\n\nDirichlet\nNeumann\nRobin\nPeriodic\nInterface\n\n\n\n\n\n","category":"type"},{"location":"Helpers.html#Internal-structures","page":"Helpers","title":"Internal structures","text":"","category":"section"},{"location":"Helpers.html","page":"Helpers","title":"Helpers","text":"These data blocks are used internally and are not interacted with by the user,","category":"page"},{"location":"Helpers.html","page":"Helpers","title":"Helpers","text":"FaADE.Helpers.DataBlock\nFaADE.Helpers.BoundaryData1D\nFaADE.Helpers.BoundaryData2D","category":"page"},{"location":"Helpers.html#FaADE.Helpers.DataBlock","page":"Helpers","title":"FaADE.Helpers.DataBlock","text":"DataBlock\n\nPassed around internally between functions. Only contains data required for current timestep.\n\n\n\n\n\n","category":"type"},{"location":"Helpers.html#FaADE.Helpers.BoundaryData1D","page":"Helpers","title":"FaADE.Helpers.BoundaryData1D","text":"BoundaryData1D\n\nData structure for storage of SATs in 1 dimensional problems\n\n\n\n\n\n","category":"type"},{"location":"Helpers.html#FaADE.Helpers.BoundaryData2D","page":"Helpers","title":"FaADE.Helpers.BoundaryData2D","text":"BoundaryData2D\n\nData structure for storage of SATs in 2 dimensional problems\n\n\n\n\n\n","category":"type"},{"location":"Helpers.html","page":"Helpers","title":"Helpers","text":"Moving data between blocks uses the following functions,","category":"page"},{"location":"Helpers.html","page":"Helpers","title":"Helpers","text":"FaADE.Helpers.copyUtoSAT!\nFaADE.Helpers.copySATtoU!\nFaADE.Helpers.addSATtoU!","category":"page"},{"location":"Helpers.html#FaADE.Helpers.copyUtoSAT!","page":"Helpers","title":"FaADE.Helpers.copyUtoSAT!","text":"copyUtoSAT!\n\nMoves data from the solution u at a given boundary to the SAT_ field in BoundaryStorage structs. Or moves all data to SAT_ fields.\n\n\n\n\n\n","category":"function"},{"location":"Helpers.html#FaADE.Helpers.copySATtoU!","page":"Helpers","title":"FaADE.Helpers.copySATtoU!","text":"copySATtoU!\n\nMoves data from the SAT_ field  on the given side in BoundaryStorage to u. Or moves all data from u to SAT_ fields.\n\n\n\n\n\n","category":"function"},{"location":"Helpers.html#FaADE.Helpers.addSATtoU!","page":"Helpers","title":"FaADE.Helpers.addSATtoU!","text":"addSATtoU!\n\nAdd data from the SAT_ field  on the given side in BoundaryStorage to u. Or add all data from u to SAT_ fields.\n\n\n\n\n\n","category":"function"},{"location":"Helpers.html#Nifty-internal-functions","page":"Helpers","title":"Nifty internal functions","text":"","category":"section"},{"location":"Helpers.html","page":"Helpers","title":"Helpers","text":"FaADE.Helpers.check_order\nFaADE.Helpers.check_boundary\nFaADE.Helpers.halforder\nFaADE.Helpers.BoundaryNodeInput\nFaADE.Helpers.BoundaryNodeOutput\nFaADE.Helpers.SATNodeOutput\nFaADE.Helpers.SelectLoopDirection","category":"page"},{"location":"Helpers.html#FaADE.Helpers.check_order","page":"Helpers","title":"FaADE.Helpers.check_order","text":"check_order\n\nEnsure the users requested order makes sense.\n\n\n\n\n\n","category":"function"},{"location":"Helpers.html#FaADE.Helpers.check_boundary","page":"Helpers","title":"FaADE.Helpers.check_boundary","text":"check_boundary\n\nSome functions only work for Left or Right nodes.\n\n\n\n\n\n","category":"function"},{"location":"Helpers.html#FaADE.Helpers.halforder","page":"Helpers","title":"FaADE.Helpers.halforder","text":"halforder\n\nReturns order2\n\n\n\n\n\n","category":"function"},{"location":"Helpers.html#FaADE.Helpers.BoundaryNodeInput","page":"Helpers","title":"FaADE.Helpers.BoundaryNodeInput","text":"BoundaryNodeInput\n\nReturns the required number of nodes needed to compute FaADE.Derivatives.SecondDerivative on the boundary. order == 2 return 1, order  2 return 2order\n\n\n\n\n\n","category":"function"},{"location":"Helpers.html#FaADE.Helpers.BoundaryNodeOutput","page":"Helpers","title":"FaADE.Helpers.BoundaryNodeOutput","text":"BoundaryNodeOutput\n\nReturns the size of the array output by FaADE.Derivatives.SecondDerivative on the boundary. order == 2 return 1, order  2 return order+order2\n\n\n\n\n\n","category":"function"},{"location":"Helpers.html#FaADE.Helpers.SATNodeOutput","page":"Helpers","title":"FaADE.Helpers.SATNodeOutput","text":"SATNodeOutput\n\nReturns the number of nodes needed for the BoundaryData1D and BoundaryData2D data structures. order == 2 return 2, order  2 return order+order2\n\n\n\n\n\n","category":"function"},{"location":"Helpers.html#FaADE.Helpers.SelectLoopDirection","page":"Helpers","title":"FaADE.Helpers.SelectLoopDirection","text":"SelectLoopDirection\n\nUsed to tell the SATs over which axis to loop\n\n\n\n\n\n","category":"function"},{"location":"Helpers.html","page":"Helpers","title":"Helpers","text":"FaADE.Helpers.GetAxis\nFaADE.Helpers.GetDim\nFaADE.Helpers.GetMinŒî","category":"page"},{"location":"Helpers.html#FaADE.Helpers.GetAxis","page":"Helpers","title":"FaADE.Helpers.GetAxis","text":"GetAxis\n\nReturn the axis along which the node lies\n\n\n\n\n\n","category":"function"},{"location":"Helpers.html#FaADE.Helpers.GetDim","page":"Helpers","title":"FaADE.Helpers.GetDim","text":"GetDim\n\nReturn the data structures associated dimension\n\n\n\n\n\n","category":"function"},{"location":"Helpers.html#FaADE.Helpers.GetMinŒî","page":"Helpers","title":"FaADE.Helpers.GetMinŒî","text":"GetMinŒî\n\nReturn the miniumum grid size between Delta x and Delta y\n\n\n\n\n\n","category":"function"},{"location":"SATs.html#Simultaneous-Approximation-Terms","page":"SATs","title":"Simultaneous Approximation Terms","text":"","category":"section"},{"location":"SATs.html","page":"SATs","title":"SATs","text":"Users can create a generic SBP operator with the function,","category":"page"},{"location":"SATs.html","page":"SATs","title":"SATs","text":"FaADE.SATs.SAT","category":"page"},{"location":"SATs.html#FaADE.SATs.SAT","page":"SATs","title":"FaADE.SATs.SAT","text":"SAT(BoundCond::BoundaryConditionData,grid::GridType,order::Int,solver)\n\nCreates a Dirichlet, Neumann or Periodic SAT function(s).\n\nInputs: \n\nBoundaryConditionData\nGridType\nOrder of method\nSolver type (see solvers)\n\nReturns:\n\nBD: SAT Struct\nSATFn: SAT function(s)\n\nIf the solver is an implicit method, SATFn will have two methods, if explicit it will be a single method.\n\n\n\n\n\n","category":"function"},{"location":"SATs.html","page":"SATs","title":"SATs","text":"Note that this requires users to first create a boundary condition with boundary conditions","category":"page"},{"location":"SATs.html#Boundary-operators","page":"SATs","title":"Boundary operators","text":"","category":"section"},{"location":"SATs.html","page":"SATs","title":"SATs","text":"The following are for boundary conditions","category":"page"},{"location":"SATs.html","page":"SATs","title":"SATs","text":"FaADE.SATs.SAT_Dirichlet\nFaADE.SATs.SAT_Neumann","category":"page"},{"location":"SATs.html#FaADE.SATs.SAT_Dirichlet","page":"SATs","title":"FaADE.SATs.SAT_Dirichlet","text":"SAT_Dirichlet\n\nStorage of all objects needed for a Dirichlet SAT left uright_x_i = g(t) where iin01.\n\n\n\n\n\n","category":"type"},{"location":"SATs.html#FaADE.SATs.SAT_Neumann","page":"SATs","title":"FaADE.SATs.SAT_Neumann","text":"SAT_Neumann\n\nSimulatenous approximation term for Neumann boundary conditions     leftfracpartial upartial xright_x_i = g(t) where iin0N\n\nNodeType is either Left or Right\n\n\n\n\n\n","category":"type"},{"location":"SATs.html","page":"SATs","title":"SATs","text":"If periodic boundaries are applied","category":"page"},{"location":"SATs.html","page":"SATs","title":"SATs","text":"FaADE.SATs.SAT_Periodic","category":"page"},{"location":"SATs.html#FaADE.SATs.SAT_Periodic","page":"SATs","title":"FaADE.SATs.SAT_Periodic","text":"SAT_Periodic\n\nStorage of all objects needed for a Periodic SAT u(x_0) = u(x_N) and leftpartial_x uright_x_0 = leftpartial_x uright_x_N.\n\n\n\n\n\n","category":"type"},{"location":"SATs.html","page":"SATs","title":"SATs","text":"If a domain is split along some boundary then the following matches the values at the interface.","category":"page"},{"location":"SATs.html#Boundary-derivatives-and-penalties","page":"SATs","title":"Boundary derivatives and penalties","text":"","category":"section"},{"location":"SATs.html","page":"SATs","title":"SATs","text":"The D_x^T B and B D_x operators are given by,","category":"page"},{"location":"SATs.html","page":"SATs","title":"SATs","text":"FaADE.SATs.BoundaryDerivativeTranspose\nFaADE.SATs.BoundaryDerivative","category":"page"},{"location":"SATs.html#FaADE.SATs.BoundaryDerivativeTranspose","page":"SATs","title":"FaADE.SATs.BoundaryDerivativeTranspose","text":"BoundaryDerivativeTranspose\n\nUsed to construct EH‚Åª¬πD‚ÇÅ·µÄ where E=E‚ÇÄ or E‚Çô.\n\n\n\n\n\n","category":"function"},{"location":"SATs.html#FaADE.SATs.BoundaryDerivative","page":"SATs","title":"FaADE.SATs.BoundaryDerivative","text":"BoundaryDerivative\n\nUsed to construct E‚ÇÄD‚ÇÅ or E‚ÇôD‚ÇÅ.\n\n\n\n\n\n","category":"function"},{"location":"SATs.html","page":"SATs","title":"SATs","text":"Penalties are constructed with the following,","category":"page"},{"location":"SATs.html","page":"SATs","title":"SATs","text":"FaADE.SATs.SATpenalties\nFaADE.SATs.hval","category":"page"},{"location":"SATs.html#FaADE.SATs.SATpenalties","page":"SATs","title":"FaADE.SATs.SATpenalties","text":"SATpenalties\n\nDetermines the penatly parameters for the given boundary conditions.\n\nTODO: Remove inlineing\n\n\n\n\n\n","category":"function"},{"location":"SATs.html#FaADE.SATs.hval","page":"SATs","title":"FaADE.SATs.hval","text":"hval(order::Int64)\n\nReturns the value of h^-1 for the penalties\n\nTODO: Remove inlineing\n\n\n\n\n\n","category":"function"},{"location":"index.html#FaADE.jl","page":"Home","title":"FaADE.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"A Summation by Parts code for solving the field aligned Anisotropic Diffusion Equation. ","category":"page"},{"location":"index.html#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"FaADE.jl is a code for solving the field aligned anisotropic diffusion equation","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"fracpartial upartial t = nablacdot(k_perp nabla_perp) u + nablacdot(k_parallelnabla_parallel)u","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"where nabla_parallel = mathbfB (mathbfBcdotnabla)mathbfB^2 and nabla_perp = nabla-nabla_parallel.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Uses the Summation by Parts formulation with Simultaneous Approximation Terms (SBP-SAT) for boundary conditions [1].\nParallel operator used to apply diffusion along vector field lines.\nCurrently arbitrary parallel mappings can be provided in Cartesian geometry or an ODE for mapping grid points along field lines.\nProvides solutions in 1D for:\n1D problems\nsolution in 1D with a parallel map in the second dimension\nand solutions in 2D for:\n2D problems\nsolution in 2D with a parallel map in the third dimension","category":"page"},{"location":"index.html#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The best place to start is in the Examples section in the navigation bar to the left. The code can operate in 1D,","category":"page"},{"location":"index.html#Modules","page":"Home","title":"Modules","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Pages = [\"SATs.md\",\"Derivatives.md\",\"Helpers.md\",\"solvers.md\"]\nDepth=2","category":"page"},{"location":"index.html#Similar-software","page":"Home","title":"Similar software","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"SummationByParts.jl: A Julia implementation of a wide range of SBP operators\npyoculus: A magnetic field diagnostic package in python based on an earlier FORTRAN implementation oculus","category":"page"},{"location":"index.html#References","page":"Home","title":"References","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The mathematical background for this package can be found in:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"D. Muir, K. Duru, M. Hole, and S. Hudson, ‚ÄòProvably stable numerical method for the anisotropic diffusion equation in toroidally confined magnetic fields‚Äô. arXiv, Jun. 01, 2023. doi: 10.48550/arXiv.2306.00423","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"EditURL = \"https://github.com/Spiffmeister/FaADE.jl/blob/master/tutorials/example1D.jl\"","category":"page"},{"location":"tutorials/example1D.html#D-example","page":"1D example","title":"1D example","text":"","category":"section"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"using FaADE","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"As an example we'll solve the 1D heat equation with no parallel mapping. The PDE is","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"      fracpartial upartial t = kfracpartialpartial xfracpartial upartial x","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"with boundary conditions","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"      u(0t) = 0 qquad partial_x u(1t) = 0","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"and initial condition","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"      u(x0) = expleft(frac-(x-05)^2002right)","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"We first create a domain to solve the PDE using Grid1D,","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"ùíü = [0.0,1.0]\nn = 41\ngrid = Grid1D(ùíü,n)","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"The initial condition is a simple Gaussian","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"u‚ÇÄ(x) = exp.(-(x.-0.5).^2 ./ 0.02)","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"The boundary conditions are defined by creating Boundary objects, which will then be fed to the PDE structure","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"BoundaryLeft = Boundary(Dirichlet,t->0.0,Left)\nBoundaryRight = Boundary(Neumann,t->0.0,Right,1)","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"Create a few more things we'll need for the PDE and the solver such as the order (2) and the solver (conjugate gradient implicit euler)","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"order = 2;\nmethod = :cgie;\nnothing #hide","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"We will set the diffusion coefficient to 1 eveywhere in the domain","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"K(x) = 1.0","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"Now we can create a PDE object to pass to the solver, in this case a VariableCoefficientPDE1D,","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"P = VariableCoefficientPDE1D(u‚ÇÄ,K,order,BoundaryLeft,BoundaryRight)","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"Lastly before solving we define our time step and simulation time,","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"Œît = 0.01grid.Œîx;\nt_f = 100Œît;\nnothing #hide","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"Finally we call the solver (currently not working with Documenter.jl)","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"soln = solve(P,grid,Œît,t_f,method)","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"The solver outputs a solution data structure, with everything packaged in that we would need to reconstruct the problem from the final state if we wanted to restart.","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"No visualisation routines are written at the moment, coming soon.","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"","category":"page"},{"location":"tutorials/example1D.html","page":"1D example","title":"1D example","text":"This page was generated using Literate.jl.","category":"page"}]
}
